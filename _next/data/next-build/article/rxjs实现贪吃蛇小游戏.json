{"pageProps":{"title":"rxjs实现贪吃蛇小游戏","body":"初识rxjs感觉惊奇，感觉很多复杂的逻辑好像用rxjs来写变得简单明了。断断续续得学习了一阵子，感觉很好，却一直没有真正在项目中使用过。到底用不用rxjs很纠结，为了小需求而引入rxjs好像没那个必要，如果项目整体都换成rxjs对于过去的开发思路冲击太大，rxjs毕竟还是比较小众，其他同事也不一定会乐意学习使用。学习而不使用过不了多久就会忘记，所以这次写一个小demo来加深一下印象。那么写什么好呢，想到以前用react写过贪吃蛇小游戏，据说rxjs很适合用来开发游戏类程序，所以决定用rxjs来写一个经典的贪吃蛇小游戏。\r\n\r\n本文并不介绍rxjs原理和各种操作符的使用，主要解释一下实现的逻辑。推荐几个我经常学习的网站：\r\n\r\n- [30 天精通 RxJS (00)： 關於本系列文章](https://ithelp.ithome.com.tw/articles/10186103) 台湾同胞早年写的教程，写的很好，从原理到使用都讲的很好，还有一些生动的例子，虽然版本和写法已经有些不同，但并不影响学习。\r\n- [官网](https://rxjs.dev/)\r\n- [Learn Rxjs](https://www.learnrxjs.io/)很好的学习网站，每个操作符的解释和例子，以及各种demo。\r\n\r\n# 实现UI\r\n首先看一下整体的界面，包括Board(蛇移动的范围)、Snake(红色）、Food(绿色)、Score(分数)、暂停和重置按钮。这里我们使用react来渲染视图，当然也可以用canvas，我们只注重于逻辑，不关心ui。我们采取数据驱动视图的思维开发，逻辑和页面元素是解耦合，这种思维可以让我们很轻松从react渲染切换到canvas渲染。\r\n\r\n![image](https://user-images.githubusercontent.com/18588945/122550390-291dea00-d066-11eb-8077-2a827aeccc11.png)\r\n\r\n### Board \r\n这个结构是基本不变的，只渲染一次就够了，当然把gameover移除更好，懂react的应该理解为什么用memo。\r\n```jsx\r\n\r\nconst GameOver = ({ isGameOver }) => {\r\n    if (!isGameOver) return null;\r\n    return (\r\n        <h1 className=\"center\">GAME OVER</h1>\r\n    )\r\n}\r\n\r\nconst Board = memo(({ winWidth, size, isGameOver }) => {\r\n    const itemWidth = winWidth / size;\r\n\r\n    const Row = ({ rowIndex }) => {\r\n        return (\r\n            <div className=\"rowContainer\">\r\n                {\r\n                    Array(size).fill().map((item, index) => (\r\n                        <span key={index} className=\"boardItem\" style={{ width: itemWidth, height: itemWidth }}>\r\n                            <span></span>\r\n                        </span>\r\n                    ))\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div id=\"board\">\r\n            {\r\n                Array(size).fill().map((item, index) => <Row key={index} />)\r\n            }\r\n            <GameOver isGameOver={isGameOver} />\r\n        </div>\r\n    )\r\n})\r\n```\r\n### Snake 和 Food\r\n```jsx\r\nconst Food = ({ food, itemWidth }) => {\r\n    if (!food) return null;\r\n\r\n    return (\r\n        <span\r\n            className=\"boardItem\"\r\n            style={{\r\n                position: \"absolute\",\r\n                width: itemWidth,\r\n                height: itemWidth,\r\n                left: itemWidth * food.x,\r\n                top: itemWidth * food.y,\r\n                backgroundColor: \"green\"\r\n            }}\r\n        >\r\n            <span></span>\r\n        </span>\r\n    )\r\n\r\n}\r\n\r\nconst Snake = memo(({ data, itemWidth }) => {\r\n    return (\r\n        <>\r\n            {data.map((item, index) =>\r\n                <span\r\n                    // key={`${item.x}-${item.y}`}\r\n                    key={index}\r\n                    className=\"boardItem\"\r\n                    style={{\r\n                        position: \"absolute\",\r\n                        width: itemWidth,\r\n                        height: itemWidth,\r\n                        left: itemWidth * item.x,\r\n                        top: itemWidth * item.y,\r\n                        backgroundColor: \"red\"\r\n                    }}\r\n                >\r\n                    <span></span>\r\n                </span>\r\n            )}\r\n        </>\r\n    )\r\n})\r\n```\r\n### App\r\n把各个组件整合起来\r\n```jsx\r\nconst App = () => {\r\n    const size = 20;\r\n    const [ref, { width }] = useMeasure();\r\n\r\n    const itemWidth = width / size;\r\n\r\n    const initialState = {\r\n        isGameOver: false,\r\n        score: 0,\r\n        snake: [\r\n\r\n        ],\r\n        food: null,\r\n        isPaused: true\r\n    }\r\n\r\n    const [state, setState] = useState(initialState);\r\n\r\n    return (\r\n        <>\r\n            <Head>\r\n                <link rel=\"stylesheet\" href=\"/styles/greedySnake.css\" />\r\n            </Head>\r\n            {width > 0 ? null : <Loading />}\r\n            <div className=\"snakeGame\" ref={ref} style={{ visibility: width > 0 ? \"visible\" : \"hidden\" }}>\r\n                <Board winWidth={width} size={size} isGameOver={state.isGameOver} />\r\n                <Snake itemWidth={itemWidth} data={state.snake} />\r\n                <Food itemWidth={itemWidth} food={state.food} />\r\n                <div>\r\n                    <button id=\"pauseORresume\">{\r\n                        state.isPaused ? \"START\" : \"PAUSE\"\r\n                    }</button>\r\n                </div>\r\n                <div>\r\n                    <button id=\"reset\">reset</button>\r\n                </div>\r\n                <span>{state.score}</span>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n```\r\n现在我们已经实现了基本的页面，接下来我们要做的写游戏的逻辑驱动各元素动起来。\r\n","url":"https://github.com/gwl002/gwl002.github.io/issues/3","createdAt":"2021-06-10T16:15:20Z","tags":["react"],"description":"本文主要介绍使用rxjs和react实现一个经典的贪吃蛇游戏。","keywords":["rxjs","游戏"],"headType":"article"},"__N_SSG":true}