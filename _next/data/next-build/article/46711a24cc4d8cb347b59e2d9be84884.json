{"pageProps":{"id":"46711a24cc4d8cb347b59e2d9be84884","title":"script标签上async 和 defer的区别","body":"经常看到一些cdn的script标签上有async和defer，知道大概是异步加载却一直没深究到底有什么用，今天看到一片博文，大概了解了这两者的作用和区别。\r\n\r\n# JS 加载阻塞\r\n\r\n```\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\"/>\r\n    <script src=\"https://cdn.bootcss.com/jquery/2.1.4/jquery.min.js\"></script>\r\n</head>\r\n<body>\r\n    <h1>我是 h1 标签</h1>\r\n</body>\r\n</html>\r\n```\r\n将浏览器网速调到50k/s会发现，刷新浏览器，观察 Elements 面，一直未加载出 h1 标签（期间页面一直白屏），直到 JS 加载完成后，DOM 中才出现，这足以说明了 JS 会阻塞定义在其之后的 DOM 的加载。\r\n\r\n```\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\"/>\r\n    <script async src=\"https://cdn.bootcss.com/jquery/2.1.4/jquery.min.js\"></script>\r\n</head>\r\n<body>\r\n    <h1>我是 h1 标签</h1>\r\n</body>\r\n</html>\r\n```\r\n在script上加上async(异步)或者defer(延迟)会发现都不会阻塞DOM的加载。那么二者有什么区别呢？分析浏览遇到script的流程：\r\n1. 暂停解析 DOM；\r\n2. 执行 script 里的脚本，如果该 script 是外链，则会先下载它，下载完成后立刻执行；\r\n3. 执行完成后继续解析剩余 DOM。\r\n\r\n但是defer和async有所不同。\r\n\r\n# defer的特点\r\n- 对于 defer 的 script，浏览器会继续解析 html，且同时并行下载脚本，等 DOM 构建完成后，才会开始执行脚本，所以它不会造成阻塞；\r\n- defer 脚本下载完成后，执行时间一定是 DOMContentLoaded 事件触发之前执行；\r\n- **多个 defer 的脚本执行顺序严格按照定义顺序进行，而不是先下载好的先执行；**\r\n\r\n# async 特点\r\n- 对于 async 的 script，浏览器会继续解析 html，且同时并行下载脚本，一旦脚本下载完成会立刻执行；和 defer 一样，它在下载的时候也不会造成阻塞，但是如果它下载完成后 DOM 还没解析完成，则执行脚本的时候是会阻塞解析的；\r\n- async 脚本的执行 和 DOMContentLoaded 的触发顺序无法明确谁先谁后，因为脚本可能在 DOM 构建完成时还没下载完，也可能早就下载好了；\r\n- 多个 async，按照谁先下载完成谁先执行的原则进行，所以当它们之间有顺序依赖的时候特别容易出错。\r\n\r\n> defer 和 async 都只能用于外部脚本，如果 script 没有 src 属性，则会忽略它们。\r\n\r\n# 总结\r\n根据defer和async的不同特点可以得出一些结论，在一些需要相互依赖的脚本，按顺序执行的脚本需要使用defer；而没有依赖关系谁先下载完谁先执行就好的情况下可以用async。\r\n\r\n# 参考文献\r\n1. [探究网页资源究竟是如何阻塞浏览器加载的](https://bubuzou.com/2020/12/26/browser-block/)\r\n2. [浅谈script标签中的async和defer](https://www.cnblogs.com/jiasm/p/7683930.html)\r\n","url":"https://github.com/gwl002/gwl002.github.io/issues/7","createdAt":"2021-06-25T14:48:06Z","tags":[{"name":"javascript","color":"1d76db"}],"headType":"article"},"__N_SSG":true}