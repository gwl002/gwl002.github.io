{"pageProps":{"id":"0a541890680756b16f51cf1680e2c53d","title":"webpack分包学习笔记","body":"### 1. optimization.runtimeChunk\r\n设置runtimeChunk是将包含chunks 映射关系的 list单独从 app.js里提取出来，因为每一个 chunk 的 id 基本都是基于内容 hash 出来的，所以每次改动都会影响它，如果不将它提取出来的话，等于app.js每次都会改变。缓存就失效了。设置runtimeChunk之后，webpack就会生成一个个runtime~xxx.js的文件。\r\n```jsx\r\nmodule.exports = {\r\n  //...\r\n  optimization: {\r\n    runtimeChunk: {\r\n      name: (entrypoint) => `runtime~${entrypoint.name}`,\r\n    },\r\n    // boolean\r\n    // string single | multiple\r\n    // object name:()=>null\r\n};\r\n```\r\n### 2. optimization.moduleIds 和 optimization.chunkIds\r\n[webpack稳定moduleid和chunkid以实现持久化缓存的梳理](https://blog.csdn.net/weixin_33727510/article/details/91362710)\r\n\r\n### 3. optimization.splitChunks\r\n[理解webpack4.splitChunks](https://www.cnblogs.com/kwzm/p/10314438.html)","url":"https://github.com/gwl002/gwl002.github.io/issues/8","createdAt":"2021-06-25T14:55:49Z","tags":[],"headType":"article"},"__N_SSG":true}